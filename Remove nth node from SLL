PROBLEM STATEMENT:
Given the head of a linked list, remove the nth node from the end of the list and return its head.

APPROACH :
✔️ Solution - I (One-Pointer, Two-Pass)

This approach is very intuitive and easy to get.

We just iterate in the first-pass to find the length of the linked list - len.

In the next pass, iterate len - n - 1 nodes from start and delete the next node (which would be nth node from end).

Time Complexity : O(N), where, N is the number of nodes in the given list.
Space Complexity : O(1), since only constant space is used


THE CODE:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode * temp = head;
        int count = 0;
        while(temp){
            count++;
            temp = temp->next;
        }
        if(n ==count)
            return head->next;
        temp=head;
        for(int i =1;i<count-n;i++){
            temp = temp->next;
        }
        ListNode *delNode =temp->next;
        temp->next = delNode->next;
        return head;
    }
};


✔️ Solution (Two-Pointer, One-Pass)

We are required to remove the nth node from the end of list. For this, we need to traverse N - n nodes from the start of the list,
where N is the length of linked list. We can do this in one-pass as follows -

Let's assign two pointers - fast and slow to head. We will first iterate for n nodes from start using the fast pointer.

Now, between the fast and slow pointers, there is a gap of n nodes. Now, just Iterate and increment both the pointers till fast reaches the last node. 
The gap between fast and slow is still of n nodes, meaning that slow is nth node from the last node (which currently is fast)

For eg. let the list be 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9, and n = 4.

1. 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> null
   ^slow               ^fast
   |<--gap of n nodes-->|
 
 => Now traverse till fast reaches end
 
 2. 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> null
                        ^slow               ^fast
                        |<--gap of n nodes-->|
						
'slow' is at (n+1)th node from end.
So just delete nth node from end by assigning slow -> next as slow -> next -> next (which would remove nth node from end of list).


THE CODE :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
       ListNode * slow = head,*fast = head;
       while(n--){
           fast = fast->next;
       }
       if(!fast)    return head->next;
       while(fast->next){
           slow=slow->next;
           fast = fast->next;
       }
       slow->next = slow->next->next;
       return head;
    }
};
