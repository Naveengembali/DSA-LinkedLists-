                                                                  <<PROBLEM>>
A doubly-linked list is a data structure that consists of sequentially linked nodes, and the nodes have reference to both the previous and the next nodes in the sequence of nodes.
You are given a sorted doubly linked list of size 'n', consisting of distinct positive integers, and a number 'k'.

Find out all the pairs in the doubly linked list with sum equal to 'k'.

Example :

Input: Linked List: 1 <-> 2 <-> 3 <-> 4 <-> 9 and 'k' = 5

Output: (1, 4) and (2, 3)

Explanation: There are 2 pairs in the linked list having sum 'k' = 5.

                                                                  <<Solution>>
/**
 * Definition of doubly linked list:
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this -> data = data;
 *          this -> prev = prev;
 *          this -> next = next;
 *      }
 * };
 *
 *************************************************************************/

Node* findLast(Node * head){
    while(head){
        if(head->next == nullptr )
            return head;
        head = head->next;   
    }
    return nullptr;
}
vector<pair<int, int>> findPairs(Node* head, int k)
{
    // Write your code here.
    vector<pair<int, int>> ans;
    Node *temp1=head,*temp2 = findLast(head);
    while(temp1->data<temp2->data){
        int sum = temp1->data + temp2->data;
        if(sum == k){
            ans.push_back(make_pair(temp1->data,temp2->data));
            temp1 = temp1->next;
            temp2 = temp2->prev;
        }
        else if(sum < k){
            temp1 = temp1->next;
        }
        else   
            temp2 = temp2->prev;
    }
    return ans;
    // while(temp1 ){
    //     temp2 = temp1->next;
    //     while(temp2 && temp1->data +temp2->data<=k){
    //         if(temp1->data +temp2->data==k){
    //             ans.push_back(make_pair(temp1->data,temp2->data));
    //         }
    //         temp2 = temp2->next;
    //     }
    //     temp1 =temp1->next;
    // }
    // return ans;
}


