Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1 :
    Input: head = [1,2,3,4,5]
    Output: [5,4,3,2,1]
Example 2:
    Input: head = [1,2]
    Output: [2,1]
Example 3:
    Input: head = []
    Output: []

Let's see this with approach as well as with code;

The APPROACH:
->we are going to use 3 variables: prevNode, head and nextNode, that you can easily guess what are meant to represent as we go;
->we will initialise prevNode to NULL, while nextNode can stay empty;
->we are then going to loop until our current main iterator (head) is truthy (ie: not NULL), which would imply we reached the end of the list;
during the iteration, we first of all update nextNode so that it acquires its namesake value, the one of the next node indeed: head->next;
->we then proceeding "reversing" head->next and assigning it the value of prevNode, while prevNode will become take the current value of head;
finally, we update head with the value we stored in nextNode and go on with the loop until we can. After the loop, we return prevNode


Let's code..

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode * currentNode = head,*nextNode = nullptr,*previous = nullptr;
        while(currentNode){
            nextNode = currentNode->next;
            currentNode->next = previous;
            previous = currentNode;
            currentNode = nextNode;
        }
        head = previous;
        return head;        
    }
};



